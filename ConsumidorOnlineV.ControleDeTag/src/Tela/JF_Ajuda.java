/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tela;

import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;

/**
 *
 * @author Vinicius Alves
 */
public class JF_Ajuda extends javax.swing.JFrame {

    /**
     * Creates new form JF_Ajuda
     */
    public JF_Ajuda() {
        initComponents();
         URL caminhoIcone = getClass().getResource("/IMG/IconeCO7.PNG");
        Image iconeTitile = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
        this.setIconImage(iconeTitile);
        setExtendedState(JF_Tela_Principal.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        textArea1.setBackground(new java.awt.Color(0, 0, 51));
        textArea1.setEditable(false);
        textArea1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        textArea1.setForeground(new java.awt.Color(255, 255, 255));
        textArea1.setText("1.0 O item de pesquisa\n      O item é o produto que o consumidor deseja encontrar.\n\n2.0 Tag de pesquisa\n      A tag é um filtro, o pesquisador pode colocar qualquer palavra que vier a mente que facilite na procura do produto que ele deseja comprar.\n      Ex: Computador, I7, 1TB... O usuario pesquisador também pode determinar um valor máximo para a pesquisa, no campo \"preco maximo do item\". \n      Nenhuma tag de pesquisa tem mais  relevância do que outra. O maximo de tags que o usuario pesquisador pode colocar é de cinco.\n\n3.0 Pesquisas\n      Essa tabela mostra todas as pesquisas que o usuario pesquisador fez. Ao clicar numa pesquisa, todas as informações dela passam para a aba \"CONFIGURAR PESQUISA\".\n      Quando a pesquisa estiver com a coloração alaranjada, é porque o item foi encontrado e enviado para o e-mail do usuario pesquisador.\n      O botão \"fazer pesquisa  agora\", fará uma pesquisa de todas as pesquisas ativas na aba \"PESQUISAS\".\n\n3.1 Cores \n      Na tabela de \"Pesquisas\", haverá pesquisas com cores diferentes, sendo elas: branca, vermelho e laranja. A branca significa que a pesquisa esta em andamento\n      e o item ainda não foi encontrado, a vermelha significa que a pesquisa foi pausada pelo usuario pesquisador e por ultimo a laranja, que significa que o item foi en-\n      contrado e um email foi enviado para o email do usuario final. \n\n4.0 Item da Pesquisa\n      Nesta aba o usuario pesquisador poderá fazer quaisquer mudanças em sua pesquisa, tais como tags, nome da pesquisa e valor maximo do produto.\n      Poderá também deletar a pesquisa se assim for necessário.   \n\n5.0 Alterar informacoes da conta\n      Nesta opcao, o usuario do \"Consumidor Online\", podera fazer quaisquer alteracoes nas informacoes da conta do mesmo.\n      Se houver uma alteracao no e-mail da conta, um codigo sera enviado para confirmar o novo e-mail.\n\n6.0 A pesquisa do item\n      A pesquisa acontece de forma automatica à cada 60 segundos.\n     \n\n7.0 Encontrou o item\n      Ao encontrar o item de pesquisa, o \"Consumidor Online\", irá encaminhar um e-mail para o usuario pesquisador, informando aonde encontrará o item.\n      O e-mail tera um link para a pagina na web, aonde o produto esta disponivel para compra.\n\n8.0 Significado dos campos\n      As tags sao obrigatorias, porem, não é necessario mais do que uma para efetuar a pesquisa. Ao fazer uma pesquisa com apenas uma tag, o usuario\n      pesquisador esta sujeito a ter retorno de diversos produtos, quanto mais tags, mais preciso sera o item encontrado.\n      O campo \"preco maximo do item\", quando não tiver valor nenhum, o proprio \"Consumidor Online\", colocara um valor de zero nele, mas o usuario \n      pesquisador não tera comparacao de preco, ou seja, o filtro de preco, não funcionara, e retornara todos os itens que aquelas tags encontrarem \n      indepentende do preco do mesmo.");

        jMenu1.setText("Menu");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Fechar");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JF_Ajuda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JF_Ajuda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JF_Ajuda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JF_Ajuda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Ajuda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
